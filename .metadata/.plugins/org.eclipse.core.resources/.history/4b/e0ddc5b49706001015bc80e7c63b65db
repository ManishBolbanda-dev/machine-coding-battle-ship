package com.mb.battlefield.validators;

import com.mb.battlefield.exception.PositionOutOfBoundException;
import com.mb.battlefield.exception.PositionOverlapException;
import com.mb.battlefield.model.Player;
import com.mb.battlefield.model.Ship;

import java.util.List;

import com.mb.battlefield.exception.PositionOutOfBoundException;
import com.mb.battlefield.exception.PositionOverlapException;
import com.mb.battlefield.model.BattleFiled;
import com.mb.battlefield.model.Coordinate;
import com.mb.battlefield.model.Player;
import com.mb.battlefield.model.Ship;
//
import lombok.AllArgsConstructor;
//
@AllArgsConstructor
public class ShipPositionValidatorImpl implements ShipPostionValidators {

	@Override
	public boolean validate(Ship ship, Player player) throws PositionOutOfBoundException, PositionOverlapException {
		// TODO Auto-generated method stub
		return false;
	}
//
	private final long battleFieldSize;
//	
////	 validate position on board
////	validate overlap
//	@Override
//	public boolean validate(Ship ship, Player player) throws PositionOutOfBoundException, PositionOverlapException {
//		if(isOutOfRangeOfField(ship.getTopLeftCo().getX(), ship.getTopLeftCo().getY()) ) {
//			throw new PositionOutOfBoundException("Enter Position with in Battle field");
//		}else if(isShipPositionOverlaping(ship.getTopLeftCo(), player.getShips())){
//			throw new PositionOverlapException("Ship id "+ship.getId()+" is overlapping.");
//		}
//		return true;
//	}
//
//	private boolean isShipPositionOverlaping(Coordinate currPosition, List<Ship> ships) {
//		boolean isOverlapping = ships.stream()
//			    .anyMatch(sh -> doesOverlap(currPosition.getX(), sh.getTopLeftCo().getX(), sh.getTopLeftCo().getX()+battleField.getSize()) 
//			                  || doesOverlap(currPosition.getY(), sh.getTopLeftCo().getY(), battleField.getSize()));
//		return isOverlapping;
//}
//
//	private boolean isOutOfRangeOfField(int x, int y) {
//		return x < 0 ||  x >= battleFieldSize 
//				|| y < 0 ||  y >= battleFieldSize;
//}
//
//	private boolean doesOverlap(int x, int x_start, int size) {
//		return x>x_start && x < (x_start+size);
//	}
//
}
