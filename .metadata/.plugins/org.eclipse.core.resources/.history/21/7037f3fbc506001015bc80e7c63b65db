package com.mb.battlefield.service;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Queue;

import com.mb.battlefield.dao.ICoordinateDao;
import com.mb.battlefield.dao.IPlayerDao;
import com.mb.battlefield.dao.IShipDao;
import com.mb.battlefield.dao.InMemoPlayerDao;
import com.mb.battlefield.dao.InMemoryCoordinateDao;
import com.mb.battlefield.dao.InMemoryShipDao;
import com.mb.battlefield.enums.AXIS;
import com.mb.battlefield.enums.FireResult;
import com.mb.battlefield.exception.PositionOutOfBoundException;
import com.mb.battlefield.exception.PositionOverlapException;
import com.mb.battlefield.model.BattleFiled;
import com.mb.battlefield.model.Coordinate;
import com.mb.battlefield.model.Player;
import com.mb.battlefield.model.PlayerFieldBoundary;
import com.mb.battlefield.model.Ship;
import com.mb.battlefield.strategy.AttackPositionStratagey;
import com.mb.battlefield.util.BeanFactory;
import com.mb.battlefield.util.ConsolePrinter;
import com.mb.battlefield.validators.ShipPositionValidatorImpl;
import com.mb.battlefield.validators.ShipPostionValidators;

import lombok.AllArgsConstructor;


public class GameService {
	private final int N ;
	private final String SH, DASH ;

	private final IPlayerService playerService;
	private final IShipService shipService;
	private final ICoordinateService coordinateService;
	private final ShipPostionValidators shipPostionValidator;
//	private final BattleFiledService battleFiledService;

	
	private final ConsolePrinter printer;
	
	private  Player PLAYER_A ;
	private  Player PLAYER_B;
	private  BattleFiled battleField ;
	
	
	
	private final AttackPositionStratagey attackPositionStratagey;
	private final BeanFactory beanFactory ;
	private final  Queue<Player> playersQue;
	private Map<Long, String> playerIdTolabel ;
	private Map<Long, PlayerFieldBoundary> playerIdToBoundary;
	
	public GameService(int n) {
		this.N = n;
		SH = "SH";
		DASH = "-";
		playersQue =  new ArrayDeque<>();
		beanFactory = new BeanFactory(n);

		playerService = beanFactory.getPlayerService();
		shipService = beanFactory.getShipService();
		coordinateService = beanFactory.getCoordinateService();
		shipPostionValidator = beanFactory.getShipPostionValidators();
		attackPositionStratagey = beanFactory.getAttackPositionStratagey();
		
//		battleFiledService = new BattleFiledService();
		
		printer = beanFactory.getConsolePrinter();
		
	}
	
	public void addPlayers(String playerAName, String playerBName) {
		PLAYER_A = playerService.add(playerAName);
		PLAYER_B = playerService.add(playerBName);
		playersQue.add(PLAYER_A);
		playersQue.add(PLAYER_B);
		playerIdTolabel = Map.of(PLAYER_A.getId(), "A", PLAYER_B.getId(), "B");
		playerIdToBoundary = Map.of(PLAYER_A.getId(), new PlayerFieldBoundary(0,  (N-1)/2, AXIS.X),
				PLAYER_B.getId(), new PlayerFieldBoundary(N/2,  N-1, AXIS.X));
		
	}
	public Ship addShip(int labelId, int shipSize, int x, int y, Player player) {
		try {
			if(!shipPostionValidator.validate(x, y, shipSize, playerService.getPlayerShips(player.getId()))) {
				return null;
			}
		} catch (PositionOutOfBoundException e) {
			printer.log("exception: "+e.getMessage()); 
		} catch (PositionOverlapException e) {
			printer.log("exception: "+e.getMessage()); 
		}
		Coordinate savedCoId = coordinateService.add(x, y);
		String shipLable = playerIdTolabel.get(player.getId()).concat(DASH).concat(SH).concat(String.valueOf(labelId));
		return shipService.addShip(shipSize, player.getId(), savedCoId.getId(), shipLable);
	}
	
	public void viewPlaytersAndShips() {
		List<Player> allPlayers = playerService.getAll();
		allPlayers.forEach(p -> {
			printer.log("Player: "+p.getName());
			playerService.getPlayerShips(p.getId()).forEach(sh -> printer.log("   has ship at "+coordinateService.getByShipId(sh.getId())));
		});
	}
		
	public void addShips(int shipLabelId, int shipSize, int playerA_X, int playerA_Y, int playerB_X, int playerB_Y) {
		
		try {
			addShip(shipLabelId, shipSize, playerA_X, playerA_Y, PLAYER_A);
			addShip(shipLabelId, shipSize, playerB_X, playerB_Y, PLAYER_B);
			
		}catch (Exception e) {
			printer.log("Exception while adding Ship: "+e.getMessage());
		}
		
	}
	
	public void startGame() {
		
		Player activePlayer = PLAYER_A;
		Player opponenetPlayer = PLAYER_B;
		Player winner = null;
		StringBuilder sb;
		int cnt = 0;
		while(true) {
			cnt++;
			printer.log(cnt+" - ");
			PlayerFieldBoundary opponentBoundary = playerIdToBoundary.get(opponenetPlayer.getId());
			
			Coordinate randomPosToAttack = attackPositionStratagey.getRandomPositionInField(
					opponentBoundary.getStart(), opponentBoundary.getEnd(), N, opponenetPlayer);
			
			FireResult result = playerService.attackOnOpponentPosition(randomPosToAttack, opponenetPlayer);
			sb = new StringBuilder();
			sb.append("Player: ");
			sb.append(activePlayer.getName()).append("'s Turns. Fired At (")
			.append(randomPosToAttack.getX()).append(", ").append(randomPosToAttack.getY())
			.append(")	: ")
			.append( result.name());
			
//			printer.log("Player: "+activePlayer.getName()+"'s Turns. Fired At ("
//			+randomPosToAttack.getX()+", "+randomPosToAttack.getY()+")	: "+ result.name()
//			+);
			
			List<Ship> opponentsTotalShips = shipService.getPlayerShips(opponenetPlayer.getId());
			List<Ship> opponenetDestroyedShips = shipService.getAllDestroyedShips(opponentsTotalShips, opponenetPlayer);
			int remainingShips = opponentsTotalShips.size() - opponenetDestroyedShips.size();
			sb.append(" Remaining Ships of Player-").append(opponenetPlayer.getName()).append(" is ").append(remainingShips).append(". ");
			printer.log(sb.toString());
			if(remainingShips == 0) {
				winner = activePlayer;
				printer.printWinner(winner);
				break;
			}else {
//				turn change
				Player temp = opponenetPlayer;
				opponenetPlayer = activePlayer;
				activePlayer = temp;
			}
			
			
		}
	}

	public void viewBattleField() {
		String[][] arr = new String[N][N];
		List<Ship> ships1 = shipService.getPlayerShips(PLAYER_A.getId());
		List<Ship> ships2 = shipService.getPlayerShips(PLAYER_A.getId());
		List<Ship> ships = new ArrayList<>(ships1);
		ships.addAll(ships2);
		
		ships.forEach(sh -> {
			Coordinate shCo = coordinateService.getByShipId(sh.getId());
			for(int x=shCo.getX(); x<shCo.getX()+sh.getSize(); x++) {
				for(int y = shCo.getY(); y< shCo.getY()+sh.getSize(); y++) {
					arr[x][y] = sh.getShipLabel();
				}
			}
		});
		
		for(String[] sarr : arr) {
			for(String label : sarr) {
				System.out.print(label+", ");
			}
			System.out.println();
		}
		
		
	}
	
}